{
	"info": {
		"_postman_id": "7048b6eb-0755-432c-885a-93b6b5644b6d",
		"name": "vuelosapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31669740"
	},
	"item": [
		{
			"name": "Flights",
			"item": [
				{
					"name": "/flights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"departureDate\");\r",
									"        pm.expect(item).to.have.property(\"gate\");\r",
									"        pm.expect(item).to.have.property(\"duration\");\r",
									"        pm.expect(item).to.have.property(\"departure\");\r",
									"        pm.expect(item).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/flights",
							"host": [
								"{{host}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "/flight/:flightId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"departureDate\");\r",
									"    pm.expect(jsonData).to.have.property(\"gate\");\r",
									"    pm.expect(jsonData).to.have.property(\"duration\");\r",
									"    pm.expect(jsonData).to.have.property(\"departure\");\r",
									"    pm.expect(jsonData).to.have.property(\"airport\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/flight/:flightId",
							"host": [
								"{{host}}"
							],
							"path": [
								"flight",
								":flightId"
							],
							"variable": [
								{
									"key": "flightId",
									"value": "76"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport/:airportId/flights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"departureDate\");\r",
									"        pm.expect(item).to.have.property(\"gate\");\r",
									"        pm.expect(item).to.have.property(\"duration\");\r",
									"        pm.expect(item).to.have.property(\"departure\");\r",
									"        pm.expect(item).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airport/:airportId/flights",
							"host": [
								"{{host}}"
							],
							"path": [
								"airport",
								":airportId",
								"flights"
							],
							"variable": [
								{
									"key": "airportId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/flights?name=&departureDate=&gate=(findBy : name, departureDate and/or gate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"departureDate\");\r",
									"        pm.expect(item).to.have.property(\"gate\");\r",
									"        pm.expect(item).to.have.property(\"duration\");\r",
									"        pm.expect(item).to.have.property(\"departure\");\r",
									"        pm.expect(item).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/flights?name=&departureDate=&gate=6",
							"host": [
								"{{host}}"
							],
							"path": [
								"flights"
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "departureDate",
									"value": ""
								},
								{
									"key": "gate",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/flight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"departureDate\");\r",
									"    pm.expect(jsonData).to.have.property(\"gate\");\r",
									"    pm.expect(jsonData).to.have.property(\"duration\");\r",
									"    pm.expect(jsonData).to.have.property(\"departure\");\r",
									"    pm.expect(jsonData).to.have.property(\"airportId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Zaragoza-Mallorca\",\r\n    \"departureDate\": \"2035-01-18\",\r\n    \"gate\": 6,\r\n    \"duration\": 2.5,\r\n    \"departure\": true,\r\n    \"airport\":{\r\n        \"id\": 7\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/flights",
							"host": [
								"{{host}}"
							],
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "/flight/:flightId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {",
									"    pm.response.to.have.status(204);",
									"})",
									"",
									"pm.test('Response body is empty', function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"})",
									"",
									"pm.test(\"Resource is deleted\", function() {",
									"    var url = pm.request.url.toString();",
									"    var parts = url.split(\"/\");",
									"    var id = parts[parts.length - 1];",
									"    ",
									"    pm.sendRequest({",
									"        url: 'http://localhost:8081/flight/' + id, ",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        }",
									"    }, function (err, res) {",
									"        pm.expect(err).to.be.null;",
									"        pm.expect(res).to.have.property('code', 404);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/flight/:flightId",
							"host": [
								"{{host}}"
							],
							"path": [
								"flight",
								":flightId"
							],
							"variable": [
								{
									"key": "flightId",
									"value": "233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/flight/:flightId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"    \r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:8081/flight/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Zaragoza-Malllorca\",\r\n    \"departureDate\": \"2035-01-18\",\r\n    \"gate\": 6,\r\n    \"duration\": 2.5,\r\n    \"departure\": false,\r\n    \"airport\":{\r\n        \"id\": 6\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/flight/:flightId",
							"host": [
								"{{host}}"
							],
							"path": [
								"flight",
								":flightId"
							],
							"variable": [
								{
									"key": "flightId",
									"value": "76"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/flight/:flightId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:8081/flight/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"gate\",\r\n    \"gate\": \"10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/flight/:flightId",
							"host": [
								"{{host}}"
							],
							"path": [
								"flight",
								":flightId"
							],
							"variable": [
								{
									"key": "flightId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Gestión de vuelos"
		},
		{
			"name": "Airports",
			"item": [
				{
					"name": "/airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"city\");\r",
									"        pm.expect(item).to.have.property(\"foundationYear\");\r",
									"        pm.expect(item).to.have.property(\"latitude\");\r",
									"        pm.expect(item).to.have.property(\"longitude\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airports",
							"host": [
								"{{host}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport/:airportId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"        pm.expect(jsonData).to.have.property(\"name\");\r",
									"        pm.expect(jsonData).to.have.property(\"city\");\r",
									"        pm.expect(jsonData).to.have.property(\"foundationYear\");\r",
									"        pm.expect(jsonData).to.have.property(\"latitude\");\r",
									"        pm.expect(jsonData).to.have.property(\"longitude\");\r",
									"        pm.expect(jsonData).to.have.property(\"active\");\r",
									"\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airport/:airportId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airport",
								":airportId"
							],
							"variable": [
								{
									"key": "airportId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport?name=&city=&active=(findBy : name, city and/or foundationYear)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"city\");\r",
									"        pm.expect(item).to.have.property(\"foundationYear\");\r",
									"        pm.expect(item).to.have.property(\"latitude\");\r",
									"        pm.expect(item).to.have.property(\"longitude\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airports?name=&city=Madrid&foundationYear=",
							"host": [
								"{{host}}"
							],
							"path": [
								"airports"
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": "Madrid"
								},
								{
									"key": "foundationYear",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"city\");\r",
									"    pm.expect(jsonData).to.have.property(\"foundationYear\");\r",
									"    pm.expect(jsonData).to.have.property(\"latitude\");\r",
									"    pm.expect(jsonData).to.have.property(\"longitude\");\r",
									"    pm.expect(jsonData).to.have.property(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"Aeropuerto de Barcelona\",\r\n\"city\": \"Barcelona\",\r\n\"foundationYear\": \"1965-10-20\",\r\n\"latitude\": 41.2974,\r\n\"longitude\": 2.0832,\r\n\"active\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airports",
							"host": [
								"{{host}}"
							],
							"path": [
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport/:airportId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"    \r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airport/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/airport/:airportId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airport",
								":airportId"
							],
							"variable": [
								{
									"key": "airportId",
									"value": "328"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport/:airportId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"       pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airport/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Aeropuerto de Barcelona\",\r\n    \"city\": \"Barcelona\",\r\n    \"foundationYear\": \"1965-10-06\",\r\n    \"latitude\": 41.6669 ,\r\n    \"longitude\": -1.0413, \r\n    \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airport/:airportId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airport",
								":airportId"
							],
							"variable": [
								{
									"key": "airportId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport/:airportId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airport/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"name\",\r\n    \"name\": \"Canarias\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airport/:airportId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airport",
								":airportId"
							],
							"variable": [
								{
									"key": "airportId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Airplane",
			"item": [
				{
					"name": "/airplanes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"model\");\r",
									"        pm.expect(item).to.have.property(\"manufacturingDate\");\r",
									"        pm.expect(item).to.have.property(\"passengerCapacity\");\r",
									"        pm.expect(item).to.have.property(\"maxSpeed\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"        pm.expect(item).to.have.property(\"airline\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airplanes",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplanes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airplane/:airplaneId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"        pm.expect(jsonData).to.have.property(\"model\");\r",
									"        pm.expect(jsonData).to.have.property(\"manufacturingDate\");\r",
									"        pm.expect(jsonData).to.have.property(\"passengerCapacity\");\r",
									"        pm.expect(jsonData).to.have.property(\"maxSpeed\");\r",
									"        pm.expect(jsonData).to.have.property(\"active\");\r",
									"        pm.expect(jsonData).to.have.property(\"airline\");\r",
									"\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airplane/:airplaneId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplane",
								":airplaneId"
							],
							"variable": [
								{
									"key": "airplaneId",
									"value": "68"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airline/:airlineId/airplanes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"model\");\r",
									"        pm.expect(item).to.have.property(\"manufacturingDate\");\r",
									"        pm.expect(item).to.have.property(\"passengerCapacity\");\r",
									"        pm.expect(item).to.have.property(\"maxSpeed\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"        pm.expect(item).to.have.property(\"airline\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airline/:airlineId/airplanes",
							"host": [
								"{{host}}"
							],
							"path": [
								"airline",
								":airlineId",
								"airplanes"
							],
							"variable": [
								{
									"key": "airlineId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airplanes?model=&manufacturingDate=&passengerCapacity=(findBy : model, manufacturingDate and/or passengerCapacity)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"model\");\r",
									"        pm.expect(item).to.have.property(\"manufacturingDate\");\r",
									"        pm.expect(item).to.have.property(\"passengerCapacity\");\r",
									"        pm.expect(item).to.have.property(\"maxSpeed\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"        pm.expect(item).to.have.property(\"airline\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airplanes?model=Boeing 737&passengerCapacity=&manufacturingDate=",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplanes"
							],
							"query": [
								{
									"key": "model",
									"value": "Boeing 737"
								},
								{
									"key": "passengerCapacity",
									"value": ""
								},
								{
									"key": "manufacturingDate",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airplane",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"model\");\r",
									"    pm.expect(jsonData).to.have.property(\"manufacturingDate\");\r",
									"    pm.expect(jsonData).to.have.property(\"passengerCapacity\");\r",
									"    pm.expect(jsonData).to.have.property(\"maxSpeed\");\r",
									"    pm.expect(jsonData).to.have.property(\"active\");\r",
									"    pm.expect(jsonData).to.have.property(\"airlineId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"model\": \"Boeing 737\",\r\n    \"manufacturingDate\": \"2010-01-18\",\r\n    \"passengerCapacity\": 200,\r\n    \"maxSpeed\": 560,\r\n    \"active\": true,\r\n    \"airline\": {\r\n        \"id\": 11\r\n    }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airplane",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplane"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airplane/:airplaneId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airplane/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/airplane/:airplaneId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplane",
								":airplaneId"
							],
							"variable": [
								{
									"key": "airplaneId",
									"value": "285"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airplane/:airplaneId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"       pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airplane/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"model\": \"Boeing 737\",\r\n    \"manufacturingDate\": \"2010-01-18\",\r\n    \"passengerCapacity\": 200,\r\n    \"maxSpeed\": 560,\r\n    \"active\": true,\r\n    \"airline\": {\r\n        \"id\": 11\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airplane/:airplaneId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplane",
								":airplaneId"
							],
							"variable": [
								{
									"key": "airplaneId",
									"value": "68"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airplane/:airplaneId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"       pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airplane/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"maxSpeed\",\r\n    \"maxSpeed\": 600\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airplane/:airplaneId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airplane",
								":airplaneId"
							],
							"variable": [
								{
									"key": "airplaneId",
									"value": "68"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Airlines",
			"item": [
				{
					"name": "/airlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"telephone\");\r",
									"        pm.expect(item).to.have.property(\"foundationYear\");\r",
									"        pm.expect(item).to.have.property(\"fleet\");\r",
									"        pm.expect(item).to.have.property(\"onTime\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airlines",
							"host": [
								"{{host}}"
							],
							"path": [
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airline/:airlineId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"        pm.expect(jsonData).to.have.property(\"name\");\r",
									"        pm.expect(jsonData).to.have.property(\"telephone\");\r",
									"        pm.expect(jsonData).to.have.property(\"foundationYear\");\r",
									"        pm.expect(jsonData).to.have.property(\"fleet\");\r",
									"        pm.expect(jsonData).to.have.property(\"onTime\");\r",
									"        pm.expect(jsonData).to.have.property(\"active\");\r",
									"\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airline/:airlineId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airline",
								":airlineId"
							],
							"variable": [
								{
									"key": "airlineId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airlines?name=SkyExpres&telephone=&fleet=(findBy : name, telephone and/or fleet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"telephone\");\r",
									"        pm.expect(item).to.have.property(\"foundationYear\");\r",
									"        pm.expect(item).to.have.property(\"fleet\");\r",
									"        pm.expect(item).to.have.property(\"onTime\");\r",
									"        pm.expect(item).to.have.property(\"active\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airlines?name=SkyExpres&telephone=&fleet=",
							"host": [
								"{{host}}"
							],
							"path": [
								"airlines"
							],
							"query": [
								{
									"key": "name",
									"value": "SkyExpres"
								},
								{
									"key": "telephone",
									"value": ""
								},
								{
									"key": "fleet",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airline",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"telephone\");\r",
									"    pm.expect(jsonData).to.have.property(\"foundationYear\");\r",
									"    pm.expect(jsonData).to.have.property(\"fleet\");\r",
									"    pm.expect(jsonData).to.have.property(\"onTime\");\r",
									"    pm.expect(jsonData).to.have.property(\"active\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"SkyExpres\",\r\n    \"telephone\": 636756345,\r\n    \"foundationYear\": \"2010-01-18\",\r\n    \"fleet\": 100,\r\n    \"onTime\": 92.3,\r\n    \"active\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airline",
							"host": [
								"{{host}}"
							],
							"path": [
								"airline"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airline/:airlineId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									" pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airline/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/airline/:airlineId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airline",
								":airlineId"
							],
							"variable": [
								{
									"key": "airlineId",
									"value": "154"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airline/:airlineId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airline/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Sky Express\",\r\n    \"telephone\": \"636756345\",\r\n    \"foundationYear\":\"2010-01-18\",\r\n    \"fleet\": 50,\r\n    \"onTime\": 92.3,\r\n    \"active\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airline/:airlineId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airline",
								":airlineId"
							],
							"variable": [
								{
									"key": "airlineId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airline/:airlineId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airline/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"fleet\",\r\n    \"fleet\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airline/:airlineId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airline",
								":airlineId"
							],
							"variable": [
								{
									"key": "airlineId",
									"value": "11"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AirpotStores",
			"item": [
				{
					"name": "/airportStores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"type\");\r",
									"        pm.expect(item).to.have.property(\"telephone\");\r",
									"        pm.expect(item).to.have.property(\"averageProfit\");\r",
									"        pm.expect(item).to.have.property(\"openingDay\");\r",
									"        pm.expect(item).to.have.property(\"open\");\r",
									"        pm.expect(item).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airportStores",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStores"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airportStore/:airportStoreId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"        pm.expect(jsonData).to.have.property(\"name\");\r",
									"        pm.expect(jsonData).to.have.property(\"type\");\r",
									"        pm.expect(jsonData).to.have.property(\"telephone\");\r",
									"        pm.expect(jsonData).to.have.property(\"averageProfit\");\r",
									"        pm.expect(jsonData).to.have.property(\"openingDay\");\r",
									"        pm.expect(jsonData).to.have.property(\"open\");\r",
									"        pm.expect(jsonData).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airportStore/:airportStoreId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStore",
								":airportStoreId"
							],
							"variable": [
								{
									"key": "airportStoreId",
									"value": "33"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airport/:airportId/airportStore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"type\");\r",
									"        pm.expect(item).to.have.property(\"telephone\");\r",
									"        pm.expect(item).to.have.property(\"averageProfit\");\r",
									"        pm.expect(item).to.have.property(\"openingDay\");\r",
									"        pm.expect(item).to.have.property(\"open\");\r",
									"        pm.expect(item).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airport/:airportId/airportStores",
							"host": [
								"{{host}}"
							],
							"path": [
								"airport",
								":airportId",
								"airportStores"
							],
							"variable": [
								{
									"key": "airportId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airportStores?name=&type=&averageProfit=(findBy : name, typeand/or averageProfit)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"type\");\r",
									"        pm.expect(item).to.have.property(\"telephone\");\r",
									"        pm.expect(item).to.have.property(\"averageProfit\");\r",
									"        pm.expect(item).to.have.property(\"openingDay\");\r",
									"        pm.expect(item).to.have.property(\"open\");\r",
									"        pm.expect(item).to.have.property(\"airport\");\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/airportStores?name=ColoniasPepa&type=&averageProfit=80.4",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStores"
							],
							"query": [
								{
									"key": "name",
									"value": "ColoniasPepa"
								},
								{
									"key": "type",
									"value": ""
								},
								{
									"key": "averageProfit",
									"value": "80.4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airportStores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"type\");\r",
									"    pm.expect(jsonData).to.have.property(\"telephone\");\r",
									"    pm.expect(jsonData).to.have.property(\"averageProfit\");\r",
									"    pm.expect(jsonData).to.have.property(\"openingDay\");\r",
									"    pm.expect(jsonData).to.have.property(\"open\");\r",
									"    pm.expect(jsonData).to.have.property(\"airportId\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ColoniasPepa\",\r\n    \"type\": \"Perfumería\",\r\n    \"telephone\": \"973554603\",\r\n    \"averageProfit\": 80.4,\r\n    \"openingDay\": \"1965-10-05\", \r\n    \"open\": true,\r\n    \"airport\": {\r\n        \"id\": 7\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airportStores",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStores"
							]
						}
					},
					"response": []
				},
				{
					"name": "/airportStore/:airportStoreId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									" pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airportStore/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/airportStore/:airportStoreId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStore",
								":airportStoreId"
							],
							"variable": [
								{
									"key": "airportStoreId",
									"value": "147"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airportStore/:airportStoreId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"    \r",
									" pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airportStore/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"ColoniasPepa\",\r\n    \"type\": \"Perfumería\",\r\n    \"telephone\": \"973554603\",\r\n    \"averageProfit\": 80.4,\r\n    \"openingDay\": \"1965-10-05\", \r\n    \"open\": false,\r\n    \"airport\": {\r\n        \"id\": 7\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airportStore/:airportStoreId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStore",
								":airportStoreId"
							],
							"variable": [
								{
									"key": "airportStoreId",
									"value": "33"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/airportStore/:airportStoreId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									" pm.sendRequest({\r",
									"        url: 'http://localhost:8081/airportStore/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"type\",\r\n    \"type\": \"Servicios Varios\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/airportStore/:airportStoreId",
							"host": [
								"{{host}}"
							],
							"path": [
								"airportStore",
								":airportStoreId"
							],
							"variable": [
								{
									"key": "airportStoreId",
									"value": "33"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Passenger",
			"item": [
				{
					"name": "/passengers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"surname\");\r",
									"        pm.expect(item).to.have.property(\"dni\");\r",
									"        pm.expect(item).to.have.property(\"birthday\");\r",
									"        pm.expect(item).to.have.property(\"age\");\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/passengers",
							"host": [
								"{{host}}"
							],
							"path": [
								"passengers"
							]
						}
					},
					"response": []
				},
				{
					"name": "/passenger/:passengerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"        pm.expect(jsonData).to.have.property(\"name\");\r",
									"        pm.expect(jsonData).to.have.property(\"surname\");\r",
									"        pm.expect(jsonData).to.have.property(\"dni\");\r",
									"        pm.expect(jsonData).to.have.property(\"birthday\");\r",
									"        pm.expect(jsonData).to.have.property(\"age\");\r",
									"        \r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/passenger/:passengerId",
							"host": [
								"{{host}}"
							],
							"path": [
								"passenger",
								":passengerId"
							],
							"variable": [
								{
									"key": "passengerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/passengers?name=&type=&averageProfit=(findBy : name, surname and/or dni)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"name\");\r",
									"        pm.expect(item).to.have.property(\"surname\");\r",
									"        pm.expect(item).to.have.property(\"dni\");\r",
									"        pm.expect(item).to.have.property(\"birthday\");\r",
									"        pm.expect(item).to.have.property(\"age\");\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/passengers?name=Josefa&surname=&dni=",
							"host": [
								"{{host}}"
							],
							"path": [
								"passengers"
							],
							"query": [
								{
									"key": "name",
									"value": "Josefa"
								},
								{
									"key": "surname",
									"value": ""
								},
								{
									"key": "dni",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/passenger",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"    pm.expect(jsonData).to.have.property(\"surname\");\r",
									"    pm.expect(jsonData).to.have.property(\"dni\");\r",
									"    pm.expect(jsonData).to.have.property(\"birthday\");\r",
									"    pm.expect(jsonData).to.have.property(\"age\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Juan\",\r\n    \"surname\": \"Martinez\",\r\n    \"dni\": \"123456789D\",\r\n    \"birthday\": \"1990-01-01\",\r\n    \"age\": 32\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/passenger",
							"host": [
								"{{host}}"
							],
							"path": [
								"passenger"
							]
						}
					},
					"response": []
				},
				{
					"name": "/passenger/:passengerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"    \r",
									" pm.sendRequest({\r",
									"        url: 'http://localhost:8081/passenger/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/passenger/:passengerId",
							"host": [
								"{{host}}"
							],
							"path": [
								"passenger",
								":passengerId"
							],
							"variable": [
								{
									"key": "passengerId",
									"value": "83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/passenger/:passengerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/passenger/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"Pepa\",\r\n        \"surname\": \"Martinez\",\r\n        \"dni\": \"123456789D\",\r\n        \"birthday\": \"1990-01-01\",\r\n        \"age\": 32\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/passenger/:passengerId",
							"host": [
								"{{host}}"
							],
							"path": [
								"passenger",
								":passengerId"
							],
							"variable": [
								{
									"key": "passengerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/passenger/:passengerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"     pm.sendRequest({\r",
									"        url: 'http://localhost:8081/passenger/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"name\",\r\n    \"name\": \"Josefa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/passenger/:passengerId",
							"host": [
								"{{host}}"
							],
							"path": [
								"passenger",
								":passengerId"
							],
							"variable": [
								{
									"key": "passengerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tickets",
			"item": [
				{
					"name": "/tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"seatNumber\");\r",
									"        pm.expect(item).to.have.property(\"issuing\");\r",
									"        pm.expect(item).to.have.property(\"baggage\");\r",
									"        pm.expect(item).to.have.property(\"premium\");\r",
									"        pm.expect(item).to.have.property(\"passengerId\");\r",
									"        pm.expect(item).to.have.property(\"flightId\");\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "/ticket/:ticketId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"id\");\r",
									"        pm.expect(jsonData).to.have.property(\"seatNumber\");\r",
									"        pm.expect(jsonData).to.have.property(\"issuing\");\r",
									"        pm.expect(jsonData).to.have.property(\"baggage\");\r",
									"        pm.expect(jsonData).to.have.property(\"premium\");\r",
									"        pm.expect(jsonData).to.have.property(\"passengerId\");\r",
									"        pm.expect(jsonData).to.have.property(\"flightId\");\r",
									"        \r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/ticket/:ticketId",
							"host": [
								"{{host}}"
							],
							"path": [
								"ticket",
								":ticketId"
							],
							"variable": [
								{
									"key": "ticketId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/flight/:flightId/tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"seatNumber\");\r",
									"        pm.expect(item).to.have.property(\"issuing\");\r",
									"        pm.expect(item).to.have.property(\"premium\");\r",
									"        pm.expect(item).to.have.property(\"passengerId\");\r",
									"        pm.expect(item).to.have.property(\"flight\");\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/flight/:flightId/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"flight",
								":flightId",
								"tickets"
							],
							"variable": [
								{
									"key": "flightId",
									"value": "78"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/passenger/:passengerId/tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"seatNumber\");\r",
									"        pm.expect(item).to.have.property(\"issuing\");\r",
									"        pm.expect(item).to.have.property(\"premium\");\r",
									"        pm.expect(item).to.have.property(\"flightId\");\r",
									"        pm.expect(item).to.have.property(\"passenger\");\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/passenger/:passengerId/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"passenger",
								":passengerId",
								"tickets"
							],
							"variable": [
								{
									"key": "passengerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/tickets?seatNumber=&issuing=&baggage=(findBy : seatNumber, issuing and/or baggage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response has expected data structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"seatNumber\");\r",
									"        pm.expect(item).to.have.property(\"issuing\");\r",
									"        pm.expect(item).to.have.property(\"baggage\");\r",
									"        pm.expect(item).to.have.property(\"premium\");\r",
									"        pm.expect(item).to.have.property(\"passengerId\");\r",
									"        pm.expect(item).to.have.property(\"flightId\");\r",
									"        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/tickets?seatNumber=&issuing=&baggage=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"tickets"
							],
							"query": [
								{
									"key": "seatNumber",
									"value": ""
								},
								{
									"key": "issuing",
									"value": ""
								},
								{
									"key": "baggage",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"})\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Response contains valid data\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"seatNumber\");\r",
									"    pm.expect(jsonData).to.have.property(\"issuing\");\r",
									"    pm.expect(jsonData).to.have.property(\"baggage\");\r",
									"    pm.expect(jsonData).to.have.property(\"premium\");\r",
									"    pm.expect(jsonData).to.have.property(\"passengerId\");\r",
									"    pm.expect(jsonData).to.have.property(\"flightId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seatNumber\": \"B13\",\r\n    \"issuing\": \"2024-01-18\",\r\n    \"baggage\": 2,\r\n    \"premium\": true,\r\n    \"passenger\": {\r\n        \"id\": 1\r\n    },\r\n    \"flight\": {\r\n        \"id\": 78\r\n    }\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ticket",
							"host": [
								"{{host}}"
							],
							"path": [
								"ticket"
							]
						}
					},
					"response": []
				},
				{
					"name": "/ticket/:ticketId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"    \r",
									"pm.sendRequest({\r",
									"        url: 'http://localhost:8081/ticket/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 404);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/ticket/:ticketId",
							"host": [
								"{{host}}"
							],
							"path": [
								"ticket",
								":ticketId"
							],
							"variable": [
								{
									"key": "ticketId",
									"value": "82"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/ticket/:ticketId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:8081/ticket/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"seatNumber\": \"B13\",\r\n    \"issuing\": \"2024-01-18\",\r\n    \"baggage\": 2,\r\n    \"premium\": true,\r\n    \"passenger\": {\r\n        \"id\": 1\r\n    },\r\n    \"flight\": {\r\n        \"id\": 78\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ticket/:ticketId",
							"host": [
								"{{host}}"
							],
							"path": [
								"ticket",
								":ticketId"
							],
							"variable": [
								{
									"key": "ticketId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/ticket/:ticketId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"})\r",
									"\r",
									"pm.test('Response body is empty', function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"Resource is deleted\", function() {\r",
									"    var url = pm.request.url.toString();\r",
									"    var parts = url.split(\"/\");\r",
									"    var id = parts[parts.length - 1];\r",
									"\r",
									"        pm.sendRequest({\r",
									"        url: 'http://localhost:8081/ticket/' + id, \r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        pm.expect(err).to.be.null;\r",
									"        pm.expect(res).to.have.property('code', 200);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"field\": \"seatNumber\",\r\n    \"seatNumber\": \"J3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/ticket/:ticketId",
							"host": [
								"{{host}}"
							],
							"path": [
								"ticket",
								":ticketId"
							],
							"variable": [
								{
									"key": "ticketId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}